"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web-push";
exports.ids = ["vendor-chunks/web-push"];
exports.modules = {

/***/ "(rsc)/./node_modules/web-push/src/encryption-helper.js":
/*!********************************************************!*\
  !*** ./node_modules/web-push/src/encryption-helper.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst ece = __webpack_require__(/*! http_ece */ \"(rsc)/./node_modules/http_ece/ece.js\");\n\nconst encrypt = function(userPublicKey, userAuth, payload, contentEncoding) {\n  if (!userPublicKey) {\n    throw new Error('No user public key provided for encryption.');\n  }\n\n  if (typeof userPublicKey !== 'string') {\n    throw new Error('The subscription p256dh value must be a string.');\n  }\n\n  if (Buffer.from(userPublicKey, 'base64url').length !== 65) {\n    throw new Error('The subscription p256dh value should be 65 bytes long.');\n  }\n\n  if (!userAuth) {\n    throw new Error('No user auth provided for encryption.');\n  }\n\n  if (typeof userAuth !== 'string') {\n    throw new Error('The subscription auth key must be a string.');\n  }\n\n  if (Buffer.from(userAuth, 'base64url').length < 16) {\n    throw new Error('The subscription auth key should be at least 16 '\n    + 'bytes long');\n  }\n\n  if (typeof payload !== 'string' && !Buffer.isBuffer(payload)) {\n    throw new Error('Payload must be either a string or a Node Buffer.');\n  }\n\n  if (typeof payload === 'string' || payload instanceof String) {\n    payload = Buffer.from(payload);\n  }\n\n  const localCurve = crypto.createECDH('prime256v1');\n  const localPublicKey = localCurve.generateKeys();\n\n  const salt = crypto.randomBytes(16).toString('base64url');\n\n  const cipherText = ece.encrypt(payload, {\n    version: contentEncoding,\n    dh: userPublicKey,\n    privateKey: localCurve,\n    salt: salt,\n    authSecret: userAuth\n  });\n\n  return {\n    localPublicKey: localPublicKey,\n    salt: salt,\n    cipherText: cipherText\n  };\n};\n\nmodule.exports = {\n  encrypt: encrypt\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL2VuY3J5cHRpb24taGVscGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTtBQUMvQixZQUFZLG1CQUFPLENBQUMsc0RBQVU7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHVqb2UtYWktY29hY2gvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL2VuY3J5cHRpb24taGVscGVyLmpzP2Q2OGIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IGVjZSA9IHJlcXVpcmUoJ2h0dHBfZWNlJyk7XG5cbmNvbnN0IGVuY3J5cHQgPSBmdW5jdGlvbih1c2VyUHVibGljS2V5LCB1c2VyQXV0aCwgcGF5bG9hZCwgY29udGVudEVuY29kaW5nKSB7XG4gIGlmICghdXNlclB1YmxpY0tleSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gdXNlciBwdWJsaWMga2V5IHByb3ZpZGVkIGZvciBlbmNyeXB0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB1c2VyUHVibGljS2V5ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN1YnNjcmlwdGlvbiBwMjU2ZGggdmFsdWUgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgfVxuXG4gIGlmIChCdWZmZXIuZnJvbSh1c2VyUHVibGljS2V5LCAnYmFzZTY0dXJsJykubGVuZ3RoICE9PSA2NSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN1YnNjcmlwdGlvbiBwMjU2ZGggdmFsdWUgc2hvdWxkIGJlIDY1IGJ5dGVzIGxvbmcuJyk7XG4gIH1cblxuICBpZiAoIXVzZXJBdXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyB1c2VyIGF1dGggcHJvdmlkZWQgZm9yIGVuY3J5cHRpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHVzZXJBdXRoICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN1YnNjcmlwdGlvbiBhdXRoIGtleSBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5mcm9tKHVzZXJBdXRoLCAnYmFzZTY0dXJsJykubGVuZ3RoIDwgMTYpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzdWJzY3JpcHRpb24gYXV0aCBrZXkgc2hvdWxkIGJlIGF0IGxlYXN0IDE2ICdcbiAgICArICdieXRlcyBsb25nJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHBheWxvYWQgIT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNCdWZmZXIocGF5bG9hZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BheWxvYWQgbXVzdCBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYSBOb2RlIEJ1ZmZlci4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycgfHwgcGF5bG9hZCBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgIHBheWxvYWQgPSBCdWZmZXIuZnJvbShwYXlsb2FkKTtcbiAgfVxuXG4gIGNvbnN0IGxvY2FsQ3VydmUgPSBjcnlwdG8uY3JlYXRlRUNESCgncHJpbWUyNTZ2MScpO1xuICBjb25zdCBsb2NhbFB1YmxpY0tleSA9IGxvY2FsQ3VydmUuZ2VuZXJhdGVLZXlzKCk7XG5cbiAgY29uc3Qgc2FsdCA9IGNyeXB0by5yYW5kb21CeXRlcygxNikudG9TdHJpbmcoJ2Jhc2U2NHVybCcpO1xuXG4gIGNvbnN0IGNpcGhlclRleHQgPSBlY2UuZW5jcnlwdChwYXlsb2FkLCB7XG4gICAgdmVyc2lvbjogY29udGVudEVuY29kaW5nLFxuICAgIGRoOiB1c2VyUHVibGljS2V5LFxuICAgIHByaXZhdGVLZXk6IGxvY2FsQ3VydmUsXG4gICAgc2FsdDogc2FsdCxcbiAgICBhdXRoU2VjcmV0OiB1c2VyQXV0aFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGxvY2FsUHVibGljS2V5OiBsb2NhbFB1YmxpY0tleSxcbiAgICBzYWx0OiBzYWx0LFxuICAgIGNpcGhlclRleHQ6IGNpcGhlclRleHRcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbmNyeXB0OiBlbmNyeXB0XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/encryption-helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/web-push/src/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst vapidHelper = __webpack_require__(/*! ./vapid-helper.js */ \"(rsc)/./node_modules/web-push/src/vapid-helper.js\");\nconst encryptionHelper = __webpack_require__(/*! ./encryption-helper.js */ \"(rsc)/./node_modules/web-push/src/encryption-helper.js\");\nconst WebPushLib = __webpack_require__(/*! ./web-push-lib.js */ \"(rsc)/./node_modules/web-push/src/web-push-lib.js\");\nconst WebPushError = __webpack_require__(/*! ./web-push-error.js */ \"(rsc)/./node_modules/web-push/src/web-push-error.js\");\nconst WebPushConstants = __webpack_require__(/*! ./web-push-constants.js */ \"(rsc)/./node_modules/web-push/src/web-push-constants.js\");\n\nconst webPush = new WebPushLib();\n\nmodule.exports = {\n  WebPushError: WebPushError,\n  supportedContentEncodings: WebPushConstants.supportedContentEncodings,\n  encrypt: encryptionHelper.encrypt,\n  getVapidHeaders: vapidHelper.getVapidHeaders,\n  generateVAPIDKeys: vapidHelper.generateVAPIDKeys,\n  setGCMAPIKey: webPush.setGCMAPIKey,\n  setVapidDetails: webPush.setVapidDetails,\n  generateRequestDetails: webPush.generateRequestDetails,\n  sendNotification: webPush.sendNotification.bind(webPush)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLG9CQUFvQixtQkFBTyxDQUFDLDRFQUFtQjtBQUMvQyx5QkFBeUIsbUJBQU8sQ0FBQyxzRkFBd0I7QUFDekQsbUJBQW1CLG1CQUFPLENBQUMsNEVBQW1CO0FBQzlDLHFCQUFxQixtQkFBTyxDQUFDLGdGQUFxQjtBQUNsRCx5QkFBeUIsbUJBQU8sQ0FBQyx3RkFBeUI7O0FBRTFEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odWpvZS1haS1jb2FjaC8uL25vZGVfbW9kdWxlcy93ZWItcHVzaC9zcmMvaW5kZXguanM/ZWIzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHZhcGlkSGVscGVyID0gcmVxdWlyZSgnLi92YXBpZC1oZWxwZXIuanMnKTtcbmNvbnN0IGVuY3J5cHRpb25IZWxwZXIgPSByZXF1aXJlKCcuL2VuY3J5cHRpb24taGVscGVyLmpzJyk7XG5jb25zdCBXZWJQdXNoTGliID0gcmVxdWlyZSgnLi93ZWItcHVzaC1saWIuanMnKTtcbmNvbnN0IFdlYlB1c2hFcnJvciA9IHJlcXVpcmUoJy4vd2ViLXB1c2gtZXJyb3IuanMnKTtcbmNvbnN0IFdlYlB1c2hDb25zdGFudHMgPSByZXF1aXJlKCcuL3dlYi1wdXNoLWNvbnN0YW50cy5qcycpO1xuXG5jb25zdCB3ZWJQdXNoID0gbmV3IFdlYlB1c2hMaWIoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFdlYlB1c2hFcnJvcjogV2ViUHVzaEVycm9yLFxuICBzdXBwb3J0ZWRDb250ZW50RW5jb2RpbmdzOiBXZWJQdXNoQ29uc3RhbnRzLnN1cHBvcnRlZENvbnRlbnRFbmNvZGluZ3MsXG4gIGVuY3J5cHQ6IGVuY3J5cHRpb25IZWxwZXIuZW5jcnlwdCxcbiAgZ2V0VmFwaWRIZWFkZXJzOiB2YXBpZEhlbHBlci5nZXRWYXBpZEhlYWRlcnMsXG4gIGdlbmVyYXRlVkFQSURLZXlzOiB2YXBpZEhlbHBlci5nZW5lcmF0ZVZBUElES2V5cyxcbiAgc2V0R0NNQVBJS2V5OiB3ZWJQdXNoLnNldEdDTUFQSUtleSxcbiAgc2V0VmFwaWREZXRhaWxzOiB3ZWJQdXNoLnNldFZhcGlkRGV0YWlscyxcbiAgZ2VuZXJhdGVSZXF1ZXN0RGV0YWlsczogd2ViUHVzaC5nZW5lcmF0ZVJlcXVlc3REZXRhaWxzLFxuICBzZW5kTm90aWZpY2F0aW9uOiB3ZWJQdXNoLnNlbmROb3RpZmljYXRpb24uYmluZCh3ZWJQdXNoKVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/urlsafe-base64-helper.js":
/*!************************************************************!*\
  !*** ./node_modules/web-push/src/urlsafe-base64-helper.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n\n/**\n * @param {string} base64\n * @returns {boolean}\n */\nfunction validate(base64) {\n  return /^[A-Za-z0-9\\-_]+$/.test(base64);\n}\n\nmodule.exports = {\n  validate: validate\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL3VybHNhZmUtYmFzZTY0LWhlbHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHVqb2UtYWktY29hY2gvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL3VybHNhZmUtYmFzZTY0LWhlbHBlci5qcz9jOWI3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGUoYmFzZTY0KSB7XG4gIHJldHVybiAvXltBLVphLXowLTlcXC1fXSskLy50ZXN0KGJhc2U2NCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZTogdmFsaWRhdGVcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/urlsafe-base64-helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/vapid-helper.js":
/*!***************************************************!*\
  !*** ./node_modules/web-push/src/vapid-helper.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst asn1 = __webpack_require__(/*! asn1.js */ \"(rsc)/./node_modules/asn1.js/lib/asn1.js\");\nconst jws = __webpack_require__(/*! jws */ \"(rsc)/./node_modules/jws/index.js\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\n\nconst WebPushConstants = __webpack_require__(/*! ./web-push-constants.js */ \"(rsc)/./node_modules/web-push/src/web-push-constants.js\");\nconst urlBase64Helper = __webpack_require__(/*! ./urlsafe-base64-helper */ \"(rsc)/./node_modules/web-push/src/urlsafe-base64-helper.js\");\n\n/**\n * DEFAULT_EXPIRATION is set to seconds in 12 hours\n */\nconst DEFAULT_EXPIRATION_SECONDS = 12 * 60 * 60;\n\n// Maximum expiration is 24 hours according. (See VAPID spec)\nconst MAX_EXPIRATION_SECONDS = 24 * 60 * 60;\n\nconst ECPrivateKeyASN = asn1.define('ECPrivateKey', function() {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('privateKey').octstr(),\n    this.key('parameters').explicit(0).objid()\n      .optional(),\n    this.key('publicKey').explicit(1).bitstr()\n      .optional()\n  );\n});\n\nfunction toPEM(key) {\n  return ECPrivateKeyASN.encode({\n    version: 1,\n    privateKey: key,\n    parameters: [1, 2, 840, 10045, 3, 1, 7] // prime256v1\n  }, 'pem', {\n    label: 'EC PRIVATE KEY'\n  });\n}\n\nfunction generateVAPIDKeys() {\n  const curve = crypto.createECDH('prime256v1');\n  curve.generateKeys();\n\n  let publicKeyBuffer = curve.getPublicKey();\n  let privateKeyBuffer = curve.getPrivateKey();\n\n  // Occassionally the keys will not be padded to the correct lengh resulting\n  // in errors, hence this padding.\n  // See https://github.com/web-push-libs/web-push/issues/295 for history.\n  if (privateKeyBuffer.length < 32) {\n    const padding = Buffer.alloc(32 - privateKeyBuffer.length);\n    padding.fill(0);\n    privateKeyBuffer = Buffer.concat([padding, privateKeyBuffer]);\n  }\n\n  if (publicKeyBuffer.length < 65) {\n    const padding = Buffer.alloc(65 - publicKeyBuffer.length);\n    padding.fill(0);\n    publicKeyBuffer = Buffer.concat([padding, publicKeyBuffer]);\n  }\n\n  return {\n    publicKey: publicKeyBuffer.toString('base64url'),\n    privateKey: privateKeyBuffer.toString('base64url')\n  };\n}\n\nfunction validateSubject(subject) {\n  if (!subject) {\n    throw new Error('No subject set in vapidDetails.subject.');\n  }\n\n  if (typeof subject !== 'string' || subject.length === 0) {\n    throw new Error('The subject value must be a string containing an https: URL or '\n    + 'mailto: address. ' + subject);\n  }\n\n  let subjectParseResult = null;\n  try {\n    subjectParseResult = new URL(subject);\n  } catch (err) {\n    throw new Error('Vapid subject is not a valid URL. ' + subject);\n  }\n  if (!['https:', 'mailto:'].includes(subjectParseResult.protocol)) {\n    throw new Error('Vapid subject is not an https: or mailto: URL. ' + subject);\n  }\n  if (subjectParseResult.hostname === 'localhost') {\n    console.warn('Vapid subject points to a localhost web URI, which is unsupported by '\n      + 'Apple\\'s push notification server and will result in a BadJwtToken error when '\n      + 'sending notifications.');\n    }\n}\n\nfunction validatePublicKey(publicKey) {\n  if (!publicKey) {\n    throw new Error('No key set vapidDetails.publicKey');\n  }\n\n  if (typeof publicKey !== 'string') {\n    throw new Error('Vapid public key is must be a URL safe Base 64 '\n    + 'encoded string.');\n  }\n\n  if (!urlBase64Helper.validate(publicKey)) {\n    throw new Error('Vapid public key must be a URL safe Base 64 (without \"=\")');\n  }\n\n  publicKey = Buffer.from(publicKey, 'base64url');\n\n  if (publicKey.length !== 65) {\n    throw new Error('Vapid public key should be 65 bytes long when decoded.');\n  }\n}\n\nfunction validatePrivateKey(privateKey) {\n  if (!privateKey) {\n    throw new Error('No key set in vapidDetails.privateKey');\n  }\n\n  if (typeof privateKey !== 'string') {\n    throw new Error('Vapid private key must be a URL safe Base 64 '\n    + 'encoded string.');\n  }\n\n  if (!urlBase64Helper.validate(privateKey)) {\n    throw new Error('Vapid private key must be a URL safe Base 64 (without \"=\")');\n  }\n\n  privateKey = Buffer.from(privateKey, 'base64url');\n\n  if (privateKey.length !== 32) {\n    throw new Error('Vapid private key should be 32 bytes long when decoded.');\n  }\n}\n\n/**\n * Given the number of seconds calculates\n * the expiration in the future by adding the passed `numSeconds`\n * with the current seconds from Unix Epoch\n *\n * @param {Number} numSeconds Number of seconds to be added\n * @return {Number} Future expiration in seconds\n */\nfunction getFutureExpirationTimestamp(numSeconds) {\n  const futureExp = new Date();\n  futureExp.setSeconds(futureExp.getSeconds() + numSeconds);\n  return Math.floor(futureExp.getTime() / 1000);\n}\n\n/**\n * Validates the Expiration Header based on the VAPID Spec\n * Throws error of type `Error` if the expiration is not validated\n *\n * @param {Number} expiration Expiration seconds from Epoch to be validated\n */\nfunction validateExpiration(expiration) {\n  if (!Number.isInteger(expiration)) {\n    throw new Error('`expiration` value must be a number');\n  }\n\n  if (expiration < 0) {\n    throw new Error('`expiration` must be a positive integer');\n  }\n\n  // Roughly checks the time of expiration, since the max expiration can be ahead\n  // of the time than at the moment the expiration was generated\n  const maxExpirationTimestamp = getFutureExpirationTimestamp(MAX_EXPIRATION_SECONDS);\n\n  if (expiration >= maxExpirationTimestamp) {\n    throw new Error('`expiration` value is greater than maximum of 24 hours');\n  }\n}\n\n/**\n * This method takes the required VAPID parameters and returns the required\n * header to be added to a Web Push Protocol Request.\n * @param  {string} audience        This must be the origin of the push service.\n * @param  {string} subject         This should be a URL or a 'mailto:' email\n * address.\n * @param  {string} publicKey       The VAPID public key.\n * @param  {string} privateKey      The VAPID private key.\n * @param  {string} contentEncoding The contentEncoding type.\n * @param  {integer} [expiration]   The expiration of the VAPID JWT.\n * @return {Object}                 Returns an Object with the Authorization and\n * 'Crypto-Key' values to be used as headers.\n */\nfunction getVapidHeaders(audience, subject, publicKey, privateKey, contentEncoding, expiration) {\n  if (!audience) {\n    throw new Error('No audience could be generated for VAPID.');\n  }\n\n  if (typeof audience !== 'string' || audience.length === 0) {\n    throw new Error('The audience value must be a string containing the '\n    + 'origin of a push service. ' + audience);\n  }\n\n  try {\n    new URL(audience); // eslint-disable-line no-new\n  } catch (err) {\n    throw new Error('VAPID audience is not a url. ' + audience);\n  }\n\n  validateSubject(subject);\n  validatePublicKey(publicKey);\n  validatePrivateKey(privateKey);\n\n  privateKey = Buffer.from(privateKey, 'base64url');\n\n  if (expiration) {\n    validateExpiration(expiration);\n  } else {\n    expiration = getFutureExpirationTimestamp(DEFAULT_EXPIRATION_SECONDS);\n  }\n\n  const header = {\n    typ: 'JWT',\n    alg: 'ES256'\n  };\n\n  const jwtPayload = {\n    aud: audience,\n    exp: expiration,\n    sub: subject\n  };\n\n  const jwt = jws.sign({\n    header: header,\n    payload: jwtPayload,\n    privateKey: toPEM(privateKey)\n  });\n\n  if (contentEncoding === WebPushConstants.supportedContentEncodings.AES_128_GCM) {\n    return {\n      Authorization: 'vapid t=' + jwt + ', k=' + publicKey\n    };\n  }\n  if (contentEncoding === WebPushConstants.supportedContentEncodings.AES_GCM) {\n    return {\n      Authorization: 'WebPush ' + jwt,\n      'Crypto-Key': 'p256ecdsa=' + publicKey\n    };\n  }\n\n  throw new Error('Unsupported encoding type specified.');\n}\n\nmodule.exports = {\n  generateVAPIDKeys: generateVAPIDKeys,\n  getFutureExpirationTimestamp: getFutureExpirationTimestamp,\n  getVapidHeaders: getVapidHeaders,\n  validateSubject: validateSubject,\n  validatePublicKey: validatePublicKey,\n  validatePrivateKey: validatePrivateKey,\n  validateExpiration: validateExpiration\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/vapid-helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/web-push-constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/web-push/src/web-push-constants.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n\nconst WebPushConstants = {};\n\nWebPushConstants.supportedContentEncodings = {\n  AES_GCM: 'aesgcm',\n  AES_128_GCM: 'aes128gcm'\n};\n\nWebPushConstants.supportedUrgency = {\n  VERY_LOW: 'very-low',\n  LOW: 'low',\n  NORMAL: 'normal',\n  HIGH: 'high'\n};\n\nmodule.exports = WebPushConstants;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL3dlYi1wdXNoLWNvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odWpvZS1haS1jb2FjaC8uL25vZGVfbW9kdWxlcy93ZWItcHVzaC9zcmMvd2ViLXB1c2gtY29uc3RhbnRzLmpzPzUxYzkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBXZWJQdXNoQ29uc3RhbnRzID0ge307XG5cbldlYlB1c2hDb25zdGFudHMuc3VwcG9ydGVkQ29udGVudEVuY29kaW5ncyA9IHtcbiAgQUVTX0dDTTogJ2Flc2djbScsXG4gIEFFU18xMjhfR0NNOiAnYWVzMTI4Z2NtJ1xufTtcblxuV2ViUHVzaENvbnN0YW50cy5zdXBwb3J0ZWRVcmdlbmN5ID0ge1xuICBWRVJZX0xPVzogJ3ZlcnktbG93JyxcbiAgTE9XOiAnbG93JyxcbiAgTk9STUFMOiAnbm9ybWFsJyxcbiAgSElHSDogJ2hpZ2gnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlB1c2hDb25zdGFudHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/web-push-constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/web-push-error.js":
/*!*****************************************************!*\
  !*** ./node_modules/web-push/src/web-push-error.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction WebPushError(message, statusCode, headers, body, endpoint) {\n  Error.captureStackTrace(this, this.constructor);\n\n  this.name = this.constructor.name;\n  this.message = message;\n  this.statusCode = statusCode;\n  this.headers = headers;\n  this.body = body;\n  this.endpoint = endpoint;\n}\n\n(__webpack_require__(/*! util */ \"util\").inherits)(WebPushError, Error);\n\nmodule.exports = WebPushError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2ViLXB1c2gvc3JjL3dlYi1wdXNoLWVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0RBQXdCOztBQUV4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2h1am9lLWFpLWNvYWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1wdXNoL3NyYy93ZWItcHVzaC1lcnJvci5qcz8yZmY2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gV2ViUHVzaEVycm9yKG1lc3NhZ2UsIHN0YXR1c0NvZGUsIGhlYWRlcnMsIGJvZHksIGVuZHBvaW50KSB7XG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuXG4gIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgdGhpcy5ib2R5ID0gYm9keTtcbiAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xufVxuXG5yZXF1aXJlKCd1dGlsJykuaW5oZXJpdHMoV2ViUHVzaEVycm9yLCBFcnJvcik7XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViUHVzaEVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/web-push-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/web-push/src/web-push-lib.js":
/*!***************************************************!*\
  !*** ./node_modules/web-push/src/web-push-lib.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst url = __webpack_require__(/*! url */ \"url\");\nconst https = __webpack_require__(/*! https */ \"https\");\n\nconst WebPushError = __webpack_require__(/*! ./web-push-error.js */ \"(rsc)/./node_modules/web-push/src/web-push-error.js\");\nconst vapidHelper = __webpack_require__(/*! ./vapid-helper.js */ \"(rsc)/./node_modules/web-push/src/vapid-helper.js\");\nconst encryptionHelper = __webpack_require__(/*! ./encryption-helper.js */ \"(rsc)/./node_modules/web-push/src/encryption-helper.js\");\nconst webPushConstants = __webpack_require__(/*! ./web-push-constants.js */ \"(rsc)/./node_modules/web-push/src/web-push-constants.js\");\nconst urlBase64Helper = __webpack_require__(/*! ./urlsafe-base64-helper */ \"(rsc)/./node_modules/web-push/src/urlsafe-base64-helper.js\");\n\n// Default TTL is four weeks.\nconst DEFAULT_TTL = 2419200;\n\nlet gcmAPIKey = '';\nlet vapidDetails;\n\nfunction WebPushLib() {\n\n}\n\n/**\n * When sending messages to a GCM endpoint you need to set the GCM API key\n * by either calling setGMAPIKey() or passing in the API key as an option\n * to sendNotification().\n * @param  {string} apiKey The API key to send with the GCM request.\n */\nWebPushLib.prototype.setGCMAPIKey = function(apiKey) {\n  if (apiKey === null) {\n    gcmAPIKey = null;\n    return;\n  }\n\n  if (typeof apiKey === 'undefined'\n  || typeof apiKey !== 'string'\n  || apiKey.length === 0) {\n    throw new Error('The GCM API Key should be a non-empty string or null.');\n  }\n\n  gcmAPIKey = apiKey;\n};\n\n/**\n * When making requests where you want to define VAPID details, call this\n * method before sendNotification() or pass in the details and options to\n * sendNotification.\n * @param  {string} subject    This must be either a URL or a 'mailto:'\n * address. For example: 'https://my-site.com/contact' or\n * 'mailto: contact@my-site.com'\n * @param  {string} publicKey  The public VAPID key, a URL safe, base64 encoded string\n * @param  {string} privateKey The private VAPID key, a URL safe, base64 encoded string.\n */\nWebPushLib.prototype.setVapidDetails = function(subject, publicKey, privateKey) {\n    if (arguments.length === 1 && arguments[0] === null) {\n      vapidDetails = null;\n      return;\n    }\n\n    vapidHelper.validateSubject(subject);\n    vapidHelper.validatePublicKey(publicKey);\n    vapidHelper.validatePrivateKey(privateKey);\n\n    vapidDetails = {\n      subject: subject,\n      publicKey: publicKey,\n      privateKey: privateKey\n    };\n  };\n\n  /**\n   * To get the details of a request to trigger a push message, without sending\n   * a push notification call this method.\n   *\n   * This method will throw an error if there is an issue with the input.\n   * @param  {PushSubscription} subscription The PushSubscription you wish to\n   * send the notification to.\n   * @param  {string|Buffer} [payload]       The payload you wish to send to the\n   * the user.\n   * @param  {Object} [options]              Options for the GCM API key and\n   * vapid keys can be passed in if they are unique for each notification you\n   * wish to send.\n   * @return {Object}                       This method returns an Object which\n   * contains 'endpoint', 'method', 'headers' and 'payload'.\n   */\nWebPushLib.prototype.generateRequestDetails = function(subscription, payload, options) {\n    if (!subscription || !subscription.endpoint) {\n      throw new Error('You must pass in a subscription with at least '\n      + 'an endpoint.');\n    }\n\n    if (typeof subscription.endpoint !== 'string'\n    || subscription.endpoint.length === 0) {\n      throw new Error('The subscription endpoint must be a string with '\n      + 'a valid URL.');\n    }\n\n    if (payload) {\n      // Validate the subscription keys\n      if (typeof subscription !== 'object' || !subscription.keys\n      || !subscription.keys.p256dh\n      || !subscription.keys.auth) {\n        throw new Error('To send a message with a payload, the '\n        + 'subscription must have \\'auth\\' and \\'p256dh\\' keys.');\n      }\n    }\n\n    let currentGCMAPIKey = gcmAPIKey;\n    let currentVapidDetails = vapidDetails;\n    let timeToLive = DEFAULT_TTL;\n    let extraHeaders = {};\n    let contentEncoding = webPushConstants.supportedContentEncodings.AES_128_GCM;\n    let urgency = webPushConstants.supportedUrgency.NORMAL;\n    let topic;\n    let proxy;\n    let agent;\n    let timeout;\n\n    if (options) {\n      const validOptionKeys = [\n        'headers',\n        'gcmAPIKey',\n        'vapidDetails',\n        'TTL',\n        'contentEncoding',\n        'urgency',\n        'topic',\n        'proxy',\n        'agent',\n        'timeout'\n      ];\n      const optionKeys = Object.keys(options);\n      for (let i = 0; i < optionKeys.length; i += 1) {\n        const optionKey = optionKeys[i];\n        if (!validOptionKeys.includes(optionKey)) {\n          throw new Error('\\'' + optionKey + '\\' is an invalid option. '\n          + 'The valid options are [\\'' + validOptionKeys.join('\\', \\'')\n          + '\\'].');\n        }\n      }\n\n      if (options.headers) {\n        extraHeaders = options.headers;\n        let duplicates = Object.keys(extraHeaders)\n            .filter(function (header) {\n              return typeof options[header] !== 'undefined';\n            });\n\n        if (duplicates.length > 0) {\n          throw new Error('Duplicated headers defined ['\n          + duplicates.join(',') + ']. Please either define the header in the'\n          + 'top level options OR in the \\'headers\\' key.');\n        }\n      }\n\n      if (options.gcmAPIKey) {\n        currentGCMAPIKey = options.gcmAPIKey;\n      }\n\n      // Falsy values are allowed here so one can skip Vapid `else if` below and use FCM\n      if (options.vapidDetails !== undefined) {\n        currentVapidDetails = options.vapidDetails;\n      }\n\n      if (options.TTL !== undefined) {\n        timeToLive = Number(options.TTL);\n        if (timeToLive < 0) {\n          throw new Error('TTL should be a number and should be at least 0');\n        }\n      }\n\n      if (options.contentEncoding) {\n        if ((options.contentEncoding === webPushConstants.supportedContentEncodings.AES_128_GCM\n          || options.contentEncoding === webPushConstants.supportedContentEncodings.AES_GCM)) {\n          contentEncoding = options.contentEncoding;\n        } else {\n          throw new Error('Unsupported content encoding specified.');\n        }\n      }\n\n      if (options.urgency) {\n        if ((options.urgency === webPushConstants.supportedUrgency.VERY_LOW\n          || options.urgency === webPushConstants.supportedUrgency.LOW\n          || options.urgency === webPushConstants.supportedUrgency.NORMAL\n          || options.urgency === webPushConstants.supportedUrgency.HIGH)) {\n          urgency = options.urgency;\n        } else {\n          throw new Error('Unsupported urgency specified.');\n        }\n      }\n\n      if (options.topic) {\n        if (!urlBase64Helper.validate(options.topic)) {\n          throw new Error('Unsupported characters set use the URL or filename-safe Base64 characters set');\n        }\n        if (options.topic.length > 32) {\n          throw new Error('use maximum of 32 characters from the URL or filename-safe Base64 characters set');\n        }\n        topic = options.topic;\n      }\n\n      if (options.proxy) {\n        if (typeof options.proxy === 'string'\n          || typeof options.proxy.host === 'string') {\n          proxy = options.proxy;\n        } else {\n          console.warn('Attempt to use proxy option, but invalid type it should be a string or proxy options object.');\n        }\n      }\n\n      if (options.agent) {\n        if (options.agent instanceof https.Agent) {\n          if (proxy) {\n            console.warn('Agent option will be ignored because proxy option is defined.');\n          }\n\n          agent = options.agent;\n        } else {\n          console.warn('Wrong type for the agent option, it should be an instance of https.Agent.');\n        }\n      }\n\n      if (typeof options.timeout === 'number') {\n        timeout = options.timeout;\n      }\n    }\n\n    if (typeof timeToLive === 'undefined') {\n      timeToLive = DEFAULT_TTL;\n    }\n\n    const requestDetails = {\n      method: 'POST',\n      headers: {\n        TTL: timeToLive\n      }\n    };\n    Object.keys(extraHeaders).forEach(function (header) {\n      requestDetails.headers[header] = extraHeaders[header];\n    });\n    let requestPayload = null;\n\n    if (payload) {\n      const encrypted = encryptionHelper\n        .encrypt(subscription.keys.p256dh, subscription.keys.auth, payload, contentEncoding);\n\n      requestDetails.headers['Content-Length'] = encrypted.cipherText.length;\n      requestDetails.headers['Content-Type'] = 'application/octet-stream';\n\n      if (contentEncoding === webPushConstants.supportedContentEncodings.AES_128_GCM) {\n        requestDetails.headers['Content-Encoding'] = webPushConstants.supportedContentEncodings.AES_128_GCM;\n      } else if (contentEncoding === webPushConstants.supportedContentEncodings.AES_GCM) {\n        requestDetails.headers['Content-Encoding'] = webPushConstants.supportedContentEncodings.AES_GCM;\n        requestDetails.headers.Encryption = 'salt=' + encrypted.salt;\n        requestDetails.headers['Crypto-Key'] = 'dh=' + encrypted.localPublicKey.toString('base64url');\n      }\n\n      requestPayload = encrypted.cipherText;\n    } else {\n      requestDetails.headers['Content-Length'] = 0;\n    }\n\n    const isGCM = subscription.endpoint.startsWith('https://android.googleapis.com/gcm/send');\n    const isFCM = subscription.endpoint.startsWith('https://fcm.googleapis.com/fcm/send');\n    // VAPID isn't supported by GCM hence the if, else if.\n    if (isGCM) {\n      if (!currentGCMAPIKey) {\n        console.warn('Attempt to send push notification to GCM endpoint, '\n        + 'but no GCM key is defined. Please use setGCMApiKey() or add '\n        + '\\'gcmAPIKey\\' as an option.');\n      } else {\n        requestDetails.headers.Authorization = 'key=' + currentGCMAPIKey;\n      }\n    } else if (currentVapidDetails) {\n      const parsedUrl = url.parse(subscription.endpoint);\n      const audience = parsedUrl.protocol + '//'\n      + parsedUrl.host;\n\n      const vapidHeaders = vapidHelper.getVapidHeaders(\n        audience,\n        currentVapidDetails.subject,\n        currentVapidDetails.publicKey,\n        currentVapidDetails.privateKey,\n        contentEncoding\n      );\n\n      requestDetails.headers.Authorization = vapidHeaders.Authorization;\n\n      if (contentEncoding === webPushConstants.supportedContentEncodings.AES_GCM) {\n        if (requestDetails.headers['Crypto-Key']) {\n          requestDetails.headers['Crypto-Key'] += ';'\n          + vapidHeaders['Crypto-Key'];\n        } else {\n          requestDetails.headers['Crypto-Key'] = vapidHeaders['Crypto-Key'];\n        }\n      }\n    } else if (isFCM && currentGCMAPIKey) {\n      requestDetails.headers.Authorization = 'key=' + currentGCMAPIKey;\n    }\n\n    requestDetails.headers.Urgency = urgency;\n\n    if (topic) {\n      requestDetails.headers.Topic = topic;\n    }\n\n    requestDetails.body = requestPayload;\n    requestDetails.endpoint = subscription.endpoint;\n\n    if (proxy) {\n      requestDetails.proxy = proxy;\n    }\n\n    if (agent) {\n      requestDetails.agent = agent;\n    }\n\n    if (timeout) {\n      requestDetails.timeout = timeout;\n    }\n\n    return requestDetails;\n  };\n\n/**\n * To send a push notification call this method with a subscription, optional\n * payload and any options.\n * @param  {PushSubscription} subscription The PushSubscription you wish to\n * send the notification to.\n * @param  {string|Buffer} [payload]       The payload you wish to send to the\n * the user.\n * @param  {Object} [options]              Options for the GCM API key and\n * vapid keys can be passed in if they are unique for each notification you\n * wish to send.\n * @return {Promise}                       This method returns a Promise which\n * resolves if the sending of the notification was successful, otherwise it\n * rejects.\n */\nWebPushLib.prototype.sendNotification = function(subscription, payload, options) {\n    let requestDetails;\n    try {\n      requestDetails = this.generateRequestDetails(subscription, payload, options);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return new Promise(function(resolve, reject) {\n      const httpsOptions = {};\n      const urlParts = url.parse(requestDetails.endpoint);\n      httpsOptions.hostname = urlParts.hostname;\n      httpsOptions.port = urlParts.port;\n      httpsOptions.path = urlParts.path;\n\n      httpsOptions.headers = requestDetails.headers;\n      httpsOptions.method = requestDetails.method;\n\n      if (requestDetails.timeout) {\n        httpsOptions.timeout = requestDetails.timeout;\n      }\n\n      if (requestDetails.agent) {\n        httpsOptions.agent = requestDetails.agent;\n      }\n\n      if (requestDetails.proxy) {\n        const { HttpsProxyAgent } = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/./node_modules/https-proxy-agent/dist/index.js\"); // eslint-disable-line global-require\n        httpsOptions.agent = new HttpsProxyAgent(requestDetails.proxy);\n      }\n\n      const pushRequest = https.request(httpsOptions, function(pushResponse) {\n        let responseText = '';\n\n        pushResponse.on('data', function(chunk) {\n          responseText += chunk;\n        });\n\n        pushResponse.on('end', function() {\n          if (pushResponse.statusCode < 200 || pushResponse.statusCode > 299) {\n            reject(new WebPushError(\n              'Received unexpected response code',\n              pushResponse.statusCode,\n              pushResponse.headers,\n              responseText,\n              requestDetails.endpoint\n            ));\n          } else {\n            resolve({\n              statusCode: pushResponse.statusCode,\n              body: responseText,\n              headers: pushResponse.headers\n            });\n          }\n        });\n      });\n\n      if (requestDetails.timeout) {\n        pushRequest.on('timeout', function() {\n          pushRequest.destroy(new Error('Socket timeout'));\n        });\n      }\n\n      pushRequest.on('error', function(e) {\n        reject(e);\n      });\n\n      if (requestDetails.body) {\n        pushRequest.write(requestDetails.body);\n      }\n\n      pushRequest.end();\n    });\n  };\n\nmodule.exports = WebPushLib;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/web-push/src/web-push-lib.js\n");

/***/ })

};
;